apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: logging
  labels:
    k8s-app: fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     debug
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    @INCLUDE input-kubernetes.conf
    @INCLUDE output-stdout.conf

  input-kubernetes.conf: |
    [INPUT]
        Name           tail
        Path           /var/log/containers/mc*.log
        Tag            mcafee.start
        Parser         beginLine

    [INPUT]
        Name            tail
        Path            /var/log/containers/mc*.log
        Tag             mcafee.end
        Parser          shutdownLine

    [INPUT]
        Name            tail
        Path            /var/log/containers/mc*.log
        Tag             mcafee.error
        Parser          skipFile

    [INPUT]
        Name tail
        Path  /var/log/containers/mc*.log
        Tag   mcafee.found
        Parser  foundVirus

  filter-mcafee.conf: |
    [FILTER]
        Name    grep
        Match   mcafee*
        Exclude log ^.+$
    # Name                kubernetes
    # Match               kube.*
    # Kube_URL            https://kubernetes.default.svc:443
    # Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    # Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
    # Kube_Tag_Prefix     kube.var.log.containers.
    # Merge_Log           On
    # Merge_Log_Key       log_processed
    # K8S-Logging.Parser  On
    # K8S-Logging.Exclude Off

  output-stdout.conf: |
    # [OUTPUT]
    #     Name            stdout
    #     Match           *

    [OUTPUT]
        Name            dds_str
        Match           mcafee*

        # dds_str configuration 
        # XMLFile is optional, if not provided will use the default user's qos search path
        # You can use either XMLFile or if you need to load multiple files, use XMLFile_xx where xx is 0-9.
        # Numbers must be contiguous
        XMLFile_0   McafeePublisher.xml
        XMLFile_1   SplunkMalware.xml

        # Mandatory parameters
        DomainParticipant   AVParticipantLibrary::AVParticipant
        DataWriter          AVPublisher::AVEventWriter

        # The name of the top-level type used for publication as specified in the <register_type> tag
        RegisteredTypeName  CIM_Malware_Event

        # The default is 'warn'. Possible values are 'none', 'warn', 'warn_once', 'abort'
        PrecisionLossAction warn

        # The JSON File containing the mapping between keys and DDS types for the given topic
        TypeMap ./mcafee-malware.json


  parsers.conf: |
    # Format of a syslog line:
    # dateMonth dateDay HH:MM:SS hostname processName[pid]: message
    # Time is formatted as (strptime): %b %d %H:%M:%S

    # -------------------------------------------------------------------------------
    # Parse the following line:
    #   Oct 01 00:16:03 ubuntu INFO OASManager [27304] Starting OAS Manager
    # Extracts the following fields:
    #   - time (string in format: "MMM dd hh:mm:ss")
    #   - hostname
    #   - severity (INFO)
    #   - appName ("OASManager")
    #   - pid (integer)
    [PARSER]
        Name        beginLine
        Format      regex
        Regex       ^.{39}\K(?<time>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) {1,2}[0-9]{1,2} [^ ]+) (?<hostname>[^ ]+) (?<severity>[^ ]+) (?<appName>[^ ]+) \[(?<pid>[0-9]+)\] Starting OAS Manager$
        Time_Key    time
        Time_Format %b %d %H:%M:%S
        Time_Keep   On
        Types pid:integer

    # -------------------------------------------------------------------------------
    # Parse a line reporting a file skipped because of error
    #   Oct 01 07:34:37 ubuntu ERROR AMOASScanner [27304] Skipping since file path /etc/cups/subscriptions.conf.N could not be opened due to - No such file or directory
    # Extracts the following fields:
    #   - time
    #   - hostname
    #   - severity
    #   - appName
    #   - pid
    #   - filepath (String)
    #   - error (String)
    # TODO: Test it with a space in the file name
    [PARSER]
        Name        skipFile
        Format      regex
        Regex       ^.{39}\K(?<time>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) {1,2}[0-9]{1,2} [^ ]+) (?<hostname>[^ ]+) (?<severity>[^ ]+) (?<appName>[^ ]+) \[(?<pid>[0-9]+)\] Skipping since file path (?<filepath>[^ ]+) could not be opened due to - (?<error>.+)$
        Time_Key    time
        Time_Format %b %d %H:%M:%S
        Time_Keep   On
        Types pid:integer


    # -------------------------------------------------------------------------------
    # Parse a line reporting an infected file:
    #   Oct 01 10:33:35 ubuntu ERROR AMOASScanner [27304] Infection caught File Name: /home/jason/Desktop/malware/G1_47cc260cf70fc81995f651dc1c5b172a.bin File Size: 29696 Infection Name: BackDoor-FBPA Time: 1569951214 Process Name: /usr/bin/scp User Name: root Profile Type: 1
    # Extracts the following fields:
    #   - time
    #   - hostname
    #   - severity
    #   - appName
    #   - pid
    #   - filepath
    #   - filesize (integer)
    #   - virusname (string)
    #   - scantime (integer, UTC)
    #   - processname (string)
    #   - username (string)
    #   - profiletype (string)
    [PARSER]
        Name        foundVirus
        Format      regex
        Regex       ^.{39}\K(?<time>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) {1,2}[0-9]{1,2} [^ ]+) (?<hostname>[^ ]+) (?<severity>[^ ]+) (?<appName>[^ ]+) \[(?<pid>[0-9]+)\] Infection caught File Name: (?<filepath>[^ ]+) File Size: (?<filesize>[0-9]+) Infection Name: (?<virusname>.+) Time: (?<scantime>[0-9]+) Process Name: (?<processname>[^ ]+) User Name: (?<username>[^ ]+) Profile Type: (?<profiletype>.*)$ 
        Time_Key    time
        Time_Format %b %d %H:%M:%S
        Time_Keep   On
        Types pid:integer
        Types filesize:integer
        Types scantime:integer

    # -------------------------------------------------------------------------------
    # Parse the stop message from the OASManager:
    #   Oct 02 00:16:07 ubuntu INFO OASManager [27304] OAS Manager is shutting down gracefully
    # Extracts the following fields:
    #   - time (string in format: "MMM dd hh:mm:ss")
    #   - hostname
    #   - severity (INFO)
    #   - appName ("OASManager")
    #   - pid (integer)
    [PARSER]
        Name        shutdownLine
        Format      regex
        Regex       ^.{39}\K(?<time>(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) {1,2}[0-9]{1,2} [^ ]+) (?<hostname>[^ ]+) (?<severity>[^ ]+) (?<appName>[^ ]+) \[(?<pid>[0-9]+)\] OAS Manager is shutting down gracefully$
        Time_Key    time
        Time_Format %b %d %H:%M:%S
        Time_Keep   On
        Types pid:integer

  McafeePublisher.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.0/rti_dds_profiles.xsd" version="6.0.0">
        <types>
        </types>

        <domain_library name="AVDomainLibrary">
        <domain name="AVDomain" domain_id="0">
            <register_type name="CIM_Malware_Event" type_ref="CIM::Malware::Event"/>
            <topic name="AVEvent" register_type_ref="CIM_Malware_Event"/>
        </domain>
        </domain_library>

        <domain_participant_library name="AVParticipantLibrary">
        <domain_participant name="AVParticipant" domain_ref="AVDomainLibrary::AVDomain">
            <publisher name="AVPublisher">
            <data_writer name="AVEventWriter" topic_ref="AVEvent"/>
            </publisher>
        </domain_participant>
        </domain_participant_library>

    </dds>


  SplunkMalware.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.0/rti_dds_profiles.xsd" version="6.0.0">
        <types>
        <module name="Common">
            <!--Identify a host in the system. At least one field must be defined-->
            <struct name="HostIdentification" nested="true">
            <!--Hostname, limited to 20 chars-->
            <member name="host" type="string" stringMaxLength="20" optional="true"/>
            <!--IPv4 or IPv6 (max length=45 chars)-->
            <member name="ip" type="string" stringMaxLength="50" optional="true"/>
            <member name="name" type="string" stringMaxLength="50" optional="true"/>
            </struct>
            <struct name="UTCTimestamp" nested="true">
            <member name="sec" type="uint32"/>
            <member name="nanosec" type="uint32"/>
            </struct>
            <!--The maximum string length used to identify a UUID-->
            <const name="GUID_STRING_MAX" type="uint16" value="20"/>
            <!--The maximum string length used to identify a file or path-->
            <const name="PATH_STRING_MAX" type="uint16" value="200"/>
            <!--The maximum string length used to identify a process name-->
            <const name="PROCESS_STRING_MAX" type="uint32" value="200"/>
            <!--The maximum string length used to identify a process ID-->
            <const name="PID_STRING_MAX" type="uint16" value="20"/>
            <const name="HASH_STRING_MAX" type="uint16" value="32"/>
            <const name="EMAIL_STRING_MAX" type="uint16" value="200"/>
            <const name="USER_STRING_MAX" type="uint16" value="40"/>
            <const name="URL_STRING_MAX" type="uint16" value="200"/>
            <const name="VENDOR_STRING_MAX" type="uint16" value="100"/>
            <!--The maximum length of a string used to identify a path in the Windows registry-->
            <const name="REGISTRY_STRING_MAX" type="uint16" value="200"/>
            <const name="FILENAME_STRING_MAX" type="uint16" value="50"/>
            <const name="MESSAGE_STRING_MAX" type="uint16" value="40"/>
        </module>
        <module name="CIM">
            <module name="Malware">
            <enum name="Action">
                <enumerator name="Allowed" value="1" defaultLiteral="true"/>
                <enumerator name="Blocked" value="2"/>
                <enumerator name="Deferred" value="3"/>
                <enumerator name="Error" value="4"/>
            </enum>
            <enum name="ControlOperation">
                <enumerator name="StartScan" value="1"/>
                <enumerator name="StopScan" value="2"/>
                <enumerator name="ScanCompleted" value="3"/>
                <enumerator name="ClientConnected" value="4"/>
                <enumerator name="ClientDisconnected" value="5"/>
                <enumerator name="InstalledVirusDefinition" value="6"/>
            </enum>
            <enum name="EventKind">
                <enumerator name="MalwareEvent_Attack" value="1" defaultLiteral="true"/>
                <enumerator name="MalwareEvent_Operation" value="2"/>
            </enum>
            <struct name="Attacks">
                <!--The action taken by the reporting device-->
                <member name="action_enum" type="nonBasic" nonBasicTypeName="CIM::Malware::Action"/>
                <!--The category of the malware event, such as keylogger or ad-supported program-->
                <member name="category" type="string" stringMaxLength="40" optional="true"/>
                <!--The date of the malware event-->
                <member name="date" type="nonBasic" nonBasicTypeName="Common::UTCTimestamp"/>
                <!--The system that was affected by the malware event (not the host that detected it)-->
                <member name="dest" type="nonBasic" nonBasicTypeName="Common::HostIdentification" optional="true"/>
                <!--The NT domain of the destination, if applicable-->
                <member name="dest_nt_domain" type="string" stringMaxLength="30" optional="true"/>
                <!--The hash of the file with suspected malware-->
                <member name="file_hash" type="string" stringMaxLength="Common::HASH_STRING_MAX" optional="true"/>
                <!--The name of the file with suspected malware-->
                <member name="file_name" type="string" stringMaxLength="Common::PATH_STRING_MAX" optional="true"/>
                <!--The full file path of the file with suspected malware-->
                <member name="file_path" type="string" stringMaxLength="Common::PATH_STRING_MAX" optional="true"/>
                <!--The reported sender of an email-based attack-->
                <member name="sender" type="string" stringMaxLength="Common::EMAIL_STRING_MAX" optional="true"/>
                <!--The name of the malware infection detected on the client (the dest), such as Trojan.Vundo, Spyware.Gaobot, and W32.Nimbda-->
                <member name="signature" type="string" stringMaxLength="50" optional="true"/>
                <!--The source of the event, such as a DAT file relay server-->
                <member name="src" type="nonBasic" nonBasicTypeName="Common::HostIdentification" optional="true"/>
                <!--The user involved in the malware event-->
                <member name="user" type="string" stringMaxLength="Common::USER_STRING_MAX" optional="true"/>
                <!--A URL containing more information about the vulnerability.	-->
                <member name="url" type="string" stringMaxLength="Common::URL_STRING_MAX" optional="true"/>
                <!--The vendor and product name of the endpoint protection system, such as Symantec AntiVirus-->
                <member name="vendor_product" type="string" stringMaxLength="Common::VENDOR_STRING_MAX" optional="true"/>
                <member name="message" type="string" stringMaxLength="Common::MESSAGE_STRING_MAX" optional="true"/>
            </struct>
            <struct name="Operations">
                <member name="op" type="nonBasic" nonBasicTypeName="CIM::Malware::ControlOperation"/>
                <!--The system that was affected by the malware event (not the host that detected it)-->
                <member name="dest" type="nonBasic" nonBasicTypeName="Common::HostIdentification" optional="true"/>
                <!--The NT domain of the dest system, if applicable-->
                <member name="dest_nt_domain" type="string" stringMaxLength="30" optional="true"/>
                <!--The product version of the malware operations product-->
                <member name="product_version" type="string" stringMaxLength="50" optional="true"/>
                <!--The version of the malware signature bundle in a signature update operations event-->
                <member name="signature_version" type="string" stringMaxLength="50" optional="true"/>
                <!--The vendor product name of the malware operations product-->
                <member name="vendor_product" type="string" stringMaxLength="Common::VENDOR_STRING_MAX" optional="true"/>
            </struct>
            <union name="Event">
                <discriminator type="nonBasic" nonBasicTypeName="CIM::Malware::EventKind"/>
                <case>
                <caseDiscriminator value="(MalwareEvent_Attack)"/>
                <member name="attack" type="nonBasic" nonBasicTypeName="CIM::Malware::Attacks"/>
                </case>
                <case>
                <caseDiscriminator value="(MalwareEvent_Operation)"/>
                <member name="operation" type="nonBasic" nonBasicTypeName="CIM::Malware::Operations"/>
                </case>
            </union>
            </module>
        </module>
        </types>

    </dds>


  mcafee-malware.json: |
    [
        {
            "tag": "mcafee.start",
            "map": {
                "hostname": "operation.dest.host",
                "appName" : "operation.vendor_product"
            },
            "static": {
                "operation.op": 1
            }
        },
        {
            "tag": "mcafee.found",
            "map": {
                "hostname": "attack.dest.host",
                "appName" : "attack.vendor_product",
                "filepath": "attack.file_path",
                "virusname": "attack.signature",
                "scantime": "attack.date.sec",
                "username": "attack.user"
            },
            "static": {
                "attack.action_enum": 2,
                "attack.date.nanosec": 0
            }
        },
        {
            "tag": "mcafee.error",
            "map": {
                "hostname": "attack.dest.host",
                "appName" : "attack.vendor_product",
                "filepath": "attack.file_path",
                "error": "attack.message"
            },
            "static": {
                "attack.action_enum": 4
            }
        },
        {
            "tag": "mcafee.end",
            "map": {
                "hostname": "operation.dest.host",
                "appName" : "operation.vendor_product"
            },
            "static": {
                "operation.op": 3
            }
        }
    ]



